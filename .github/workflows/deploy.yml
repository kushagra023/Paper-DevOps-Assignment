name: Deploy to AWS

on:
  push:
    branches: [master]

env:
  TF_VAR_public_key: ${{ secrets.AWS_PUBLIC_KEY }}
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Cleanup Previous EC2 and SG (Optional)
        run: |
          echo "Checking for existing security group..."
          GROUP_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=allow_ssh_http --query "SecurityGroups[0].GroupId" --output text)
          if [ "$GROUP_ID" != "None" ]; then
            echo "Found SG: $GROUP_ID. Checking for EC2 dependencies..."
            INSTANCE_IDS=$(aws ec2 describe-instances \
              --filters Name=instance.group-id,Values=$GROUP_ID \
              --query "Reservations[].Instances[].InstanceId" --output text)
            if [ -n "$INSTANCE_IDS" ]; then
              echo "Terminating instances: $INSTANCE_IDS"
              aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
              echo "Waiting for instances to terminate..."
              aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
            fi
            echo "Deleting security group: $GROUP_ID"
            aws ec2 delete-security-group --group-id "$GROUP_ID"
          else
            echo "No existing SG with name 'allow_ssh_http'"
          fi
      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Destroy (optional)
        run: terraform -chdir=terraform destroy -auto-approve || true

      - name: Terraform Plan
        run: terraform -chdir=terraform plan -var-file="terraform.tfvars"

      - name: Import existing Key Pair (if not already in state)
        run: |
          terraform -chdir=terraform state show aws_key_pair.dev_key || terraform -chdir=terraform import aws_key_pair.dev_key dev_key
      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve -var-file="terraform.tfvars"

      - name: Get EC2 IP
        id: get-ip
        run: |
          echo "IP=$(terraform -chdir=terraform output -raw instance_ip)" >> $GITHUB_OUTPUT
      - name: Configure Ansible Inventory
        run: |
          echo "${{ steps.get-ip.outputs.IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" > ansible/inventory.ini
      - name: Setup SSH Key
        run: |
          set -x
          mkdir -p ~/.ssh
          printf "%s" "$PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          for i in {1..5}; do
            ssh-keyscan -H ${{ steps.get-ip.outputs.IP }} >> ~/.ssh/known_hosts && break
            echo "Retrying ssh-keyscan..."
            sleep 10
          done
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Wait for instance to be ready
        run: sleep 60

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yaml
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
